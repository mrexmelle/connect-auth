// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "email": "mrexmelle@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/credentials": {
            "post": {
                "description": "Post a new credential",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Credentials"
                ],
                "parameters": [
                    {
                        "description": "Credential Request",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_credential.PostRequestDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success Response",
                        "schema": {
                            "$ref": "#/definitions/internal_credential.PostResponseDto"
                        }
                    },
                    "400": {
                        "description": "BadRequest"
                    },
                    "500": {
                        "description": "InternalServerError"
                    }
                }
            }
        },
        "/credentials/{employee_id}": {
            "delete": {
                "description": "Delete a credential",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Credentials"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Employee ID",
                        "name": "employee_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success Response",
                        "schema": {
                            "$ref": "#/definitions/internal_credential.DeleteResponseDto"
                        }
                    },
                    "400": {
                        "description": "BadRequest"
                    },
                    "500": {
                        "description": "InternalServerError"
                    }
                }
            }
        },
        "/credentials/{employee_id}/password": {
            "delete": {
                "description": "Reset a credential's password",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Credentials"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Employee ID",
                        "name": "employee_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success Response",
                        "schema": {
                            "$ref": "#/definitions/internal_credential.PatchPasswordResponseDto"
                        }
                    },
                    "400": {
                        "description": "BadRequest"
                    },
                    "500": {
                        "description": "InternalServerError"
                    }
                }
            },
            "patch": {
                "description": "Patch a credential's password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Credentials"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Employee ID",
                        "name": "employee_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Password Patch Request",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_credential.PatchPasswordRequestDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success Response",
                        "schema": {
                            "$ref": "#/definitions/internal_credential.PatchPasswordResponseDto"
                        }
                    },
                    "400": {
                        "description": "BadRequest"
                    },
                    "500": {
                        "description": "InternalServerError"
                    }
                }
            }
        },
        "/profiles/{ehid}": {
            "get": {
                "description": "Get a profile",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profiles"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Employee Hash ID",
                        "name": "ehid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success Response",
                        "schema": {
                            "$ref": "#/definitions/internal_profile.GetResponseDto"
                        }
                    },
                    "400": {
                        "description": "BadRequest"
                    },
                    "500": {
                        "description": "InternalServerError"
                    }
                }
            },
            "delete": {
                "description": "Delete a profile",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profiles"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Employee Hash ID",
                        "name": "ehid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success Response",
                        "schema": {
                            "$ref": "#/definitions/internal_profile.DeleteResponseDto"
                        }
                    },
                    "400": {
                        "description": "BadRequest"
                    },
                    "500": {
                        "description": "InternalServerError"
                    }
                }
            },
            "patch": {
                "description": "Patch a profile",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profiles"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Employee Hash ID",
                        "name": "ehid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Profile Patch Request",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_profile.PatchRequestDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success Response",
                        "schema": {
                            "$ref": "#/definitions/internal_profile.PatchResponseDto"
                        }
                    },
                    "400": {
                        "description": "BadRequest"
                    },
                    "500": {
                        "description": "InternalServerError"
                    }
                }
            }
        },
        "/sessions": {
            "post": {
                "description": "Post a new session",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sessions"
                ],
                "parameters": [
                    {
                        "description": "Session Request",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_session.PostRequestDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success Response",
                        "schema": {
                            "$ref": "#/definitions/internal_session.PostResponseDto"
                        }
                    },
                    "400": {
                        "description": "BadRequest"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "InternalServerError"
                    }
                }
            }
        }
    },
    "definitions": {
        "github_com_mrexmelle_connect-authx_internal_dtoresponse.ServiceError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "internal_credential.DeleteResponseDto": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/github_com_mrexmelle_connect-authx_internal_dtoresponse.ServiceError"
                }
            }
        },
        "internal_credential.PatchPasswordRequestDto": {
            "type": "object",
            "properties": {
                "current_password": {
                    "type": "string"
                },
                "new_password": {
                    "type": "string"
                }
            }
        },
        "internal_credential.PatchPasswordResponseDto": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/github_com_mrexmelle_connect-authx_internal_dtoresponse.ServiceError"
                }
            }
        },
        "internal_credential.PostRequestDto": {
            "type": "object",
            "properties": {
                "employee_id": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "internal_credential.PostResponseDto": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/github_com_mrexmelle_connect-authx_internal_dtoresponse.ServiceError"
                }
            }
        },
        "internal_profile.DeleteResponseDto": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/github_com_mrexmelle_connect-authx_internal_dtoresponse.ServiceError"
                }
            }
        },
        "internal_profile.Entity": {
            "type": "object",
            "properties": {
                "dob": {
                    "type": "string"
                },
                "ehid": {
                    "type": "string"
                },
                "email_address": {
                    "type": "string"
                },
                "employee_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "internal_profile.GetResponseDto": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/internal_profile.Entity"
                },
                "error": {
                    "$ref": "#/definitions/github_com_mrexmelle_connect-authx_internal_dtoresponse.ServiceError"
                }
            }
        },
        "internal_profile.PatchRequestDto": {
            "type": "object",
            "properties": {
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "internal_profile.PatchResponseDto": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/github_com_mrexmelle_connect-authx_internal_dtoresponse.ServiceError"
                }
            }
        },
        "internal_session.PostRequestDto": {
            "type": "object",
            "properties": {
                "employee_id": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "internal_session.PostResponseDto": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/internal_session.SigningResult"
                },
                "error": {
                    "$ref": "#/definitions/github_com_mrexmelle_connect-authx_internal_dtoresponse.ServiceError"
                }
            }
        },
        "internal_session.SigningResult": {
            "type": "object",
            "properties": {
                "expires": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.2.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Connect Authentication API",
	Description:      "Authentication API for Connect.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
