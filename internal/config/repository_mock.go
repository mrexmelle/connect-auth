// Code generated by MockGen. DO NOT EDIT.
// Source: internal/config/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/config/repository.go -package=config
//
// Package config is a generated GoMock package.
package config

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetDefaultUserPassword mocks base method.
func (m *MockRepository) GetDefaultUserPassword() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultUserPassword")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDefaultUserPassword indicates an expected call of GetDefaultUserPassword.
func (mr *MockRepositoryMockRecorder) GetDefaultUserPassword() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultUserPassword", reflect.TypeOf((*MockRepository)(nil).GetDefaultUserPassword))
}

// GetDsn mocks base method.
func (m *MockRepository) GetDsn() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDsn")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDsn indicates an expected call of GetDsn.
func (mr *MockRepositoryMockRecorder) GetDsn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDsn", reflect.TypeOf((*MockRepository)(nil).GetDsn))
}

// GetJwtSecret mocks base method.
func (m *MockRepository) GetJwtSecret() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJwtSecret")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetJwtSecret indicates an expected call of GetJwtSecret.
func (mr *MockRepositoryMockRecorder) GetJwtSecret() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJwtSecret", reflect.TypeOf((*MockRepository)(nil).GetJwtSecret))
}

// GetJwtValidMinute mocks base method.
func (m *MockRepository) GetJwtValidMinute() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJwtValidMinute")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetJwtValidMinute indicates an expected call of GetJwtValidMinute.
func (mr *MockRepositoryMockRecorder) GetJwtValidMinute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJwtValidMinute", reflect.TypeOf((*MockRepository)(nil).GetJwtValidMinute))
}

// GetPort mocks base method.
func (m *MockRepository) GetPort() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPort")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetPort indicates an expected call of GetPort.
func (mr *MockRepositoryMockRecorder) GetPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPort", reflect.TypeOf((*MockRepository)(nil).GetPort))
}

// GetProfile mocks base method.
func (m *MockRepository) GetProfile() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockRepositoryMockRecorder) GetProfile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockRepository)(nil).GetProfile))
}
