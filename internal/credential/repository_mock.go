// Code generated by MockGen. DO NOT EDIT.
// Source: internal/credential/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/credential/repository.go -package=credential
//
// Package credential is a generated GoMock package.
package credential

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateWithDb mocks base method.
func (m *MockRepository) CreateWithDb(db *gorm.DB, employeeId, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithDb", db, employeeId, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWithDb indicates an expected call of CreateWithDb.
func (mr *MockRepositoryMockRecorder) CreateWithDb(db, employeeId, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithDb", reflect.TypeOf((*MockRepository)(nil).CreateWithDb), db, employeeId, password)
}

// DeleteByEmployeeId mocks base method.
func (m *MockRepository) DeleteByEmployeeId(employeeId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByEmployeeId", employeeId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByEmployeeId indicates an expected call of DeleteByEmployeeId.
func (mr *MockRepositoryMockRecorder) DeleteByEmployeeId(employeeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByEmployeeId", reflect.TypeOf((*MockRepository)(nil).DeleteByEmployeeId), employeeId)
}

// ExistsByEmployeeIdAndPassword mocks base method.
func (m *MockRepository) ExistsByEmployeeIdAndPassword(employeeId, password string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsByEmployeeIdAndPassword", employeeId, password)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsByEmployeeIdAndPassword indicates an expected call of ExistsByEmployeeIdAndPassword.
func (mr *MockRepositoryMockRecorder) ExistsByEmployeeIdAndPassword(employeeId, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsByEmployeeIdAndPassword", reflect.TypeOf((*MockRepository)(nil).ExistsByEmployeeIdAndPassword), employeeId, password)
}

// ResetPasswordByEmployeeId mocks base method.
func (m *MockRepository) ResetPasswordByEmployeeId(employeeId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPasswordByEmployeeId", employeeId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPasswordByEmployeeId indicates an expected call of ResetPasswordByEmployeeId.
func (mr *MockRepositoryMockRecorder) ResetPasswordByEmployeeId(employeeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPasswordByEmployeeId", reflect.TypeOf((*MockRepository)(nil).ResetPasswordByEmployeeId), employeeId)
}

// UpdatePasswordByEmployeeIdAndPassword mocks base method.
func (m *MockRepository) UpdatePasswordByEmployeeIdAndPassword(newPassword, employeeId, currentPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePasswordByEmployeeIdAndPassword", newPassword, employeeId, currentPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePasswordByEmployeeIdAndPassword indicates an expected call of UpdatePasswordByEmployeeIdAndPassword.
func (mr *MockRepositoryMockRecorder) UpdatePasswordByEmployeeIdAndPassword(newPassword, employeeId, currentPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePasswordByEmployeeIdAndPassword", reflect.TypeOf((*MockRepository)(nil).UpdatePasswordByEmployeeIdAndPassword), newPassword, employeeId, currentPassword)
}
